# %% [markdown]
# # Pymaceuticals Inc.
# ---
# 
# ### Analysis
# 
# -  Overall it seems that Capomulin is very effective at reducing the size of tumors in mice. It has results similiar to Ramicane in terms of final tumor volume. According to the correlation graph, the weight of the mouse and the volume of the tumor are strongly, positively correlated because the coeffiecent is close to 1. 
#  

# %%
# Dependencies and Setup
import matplotlib.pyplot as plt
import pandas as pd
import scipy.stats as st

# Study data files
mouse_metadata_path = "data/Mouse_metadata.csv"
study_results_path = "data/Study_results.csv"

# Read the mouse data and the study results
mouse_metadata = pd.read_csv(mouse_metadata_path)
study_results = pd.read_csv(study_results_path)

# Combine the data into a single DataFrame
merged_data = pd.merge(mouse_metadata, study_results, on="Mouse ID")

# Display the data table for preview
print(merged_data.head())

# %%
# Checking the number of mice.
num_unique_mice = merged_data["Mouse ID"].nunique()

print(f"The number of unique mice in the dataset is: {num_unique_mice}")

# %%
# Our data should be uniquely identified by Mouse ID and Timepoint
# Get the duplicate mice by ID number that shows up for Mouse ID and Timepoint. 
duplicate_mice_ids = merged_data[merged_data.duplicated(subset=["Mouse ID", "Timepoint"], keep=False)]["Mouse ID"].unique()

print("Duplicate mice by ID number for Mouse ID and Timepoint:")
print(duplicate_mice_ids)

# %%
# Optional: Get all the data for the duplicate mouse ID. 
duplicate_mice = merged_data[merged_data.duplicated(subset=["Mouse ID", "Timepoint"], keep=False)]

print("Duplicate mice based on Mouse ID and Timepoint:")
print(duplicate_mice)

# %%
# Create a clean DataFrame by dropping the duplicate mouse by its ID.
cleaned_data = merged_data.drop_duplicates(subset=["Mouse ID", "Timepoint"], keep="first")

print(cleaned_data.head())

# %%
# Checking the number of mice in the clean DataFrame.
num_unique_mice = cleaned_data["Mouse ID"].nunique()

print(f"The number of unique mice in the dataset is: {num_unique_mice}")

# %% [markdown]
# ## Summary Statistics

# %%
# Generate a summary statistics table of mean, median, variance, standard deviation, and SEM of the tumor volume for each regimen

# Use groupby and summary statistical methods to calculate the following properties of each drug regimen: 
# mean, median, variance, standard deviation, and SEM of the tumor volume. 
# Assemble the resulting series into a single summary DataFrame.
summary_stats = cleaned_data.groupby('Drug Regimen')['Tumor Volume (mm3)'].agg(['mean', 'median', 'var', 'std', 'sem'])
summary_stats.columns = ['Mean', 'Median', 'Variance', 'Standard Deviation', 'SEM']
print(summary_stats)

# %%
# A more advanced method to generate a summary statistics table of mean, median, variance, standard deviation,
# and SEM of the tumor volume for each regimen (only one method is required in the solution)

# Using the aggregation method, produce the same summary statistics in a single line
summary_stats_single_line = cleaned_data.groupby('Drug Regimen')['Tumor Volume (mm3)'].agg(mean='mean', median='median', var='var', std='std', sem='sem')
print(summary_stats_single_line)

# %% [markdown]
# ## Bar and Pie Charts

# %%
# Generate a bar plot showing the total number of rows (Mouse ID/Timepoints) for each drug regimen using Pandas.
drug_regimen_counts = cleaned_data['Drug Regimen'].value_counts()

drug_regimen_counts.plot(kind='bar', color='skyblue', figsize=(10, 6))
plt.title('Total Number of Rows (Mouse ID/Timepoints) for Each Drug Regimen')
plt.xlabel('Drug Regimen')
plt.ylabel('Number of Rows')
plt.xticks(rotation=45)
plt.show()

# %%
# Generate a bar plot showing the total number of rows (Mouse ID/Timepoints) for each drug regimen using pyplot.
drug_regimen_counts = cleaned_data['Drug Regimen'].value_counts()

plt.figure(figsize=(10, 6))
plt.bar(drug_regimen_counts.index, drug_regimen_counts, color='skyblue')
plt.title('Total Number of Rows (Mouse ID/Timepoints) for Each Drug Regimen')
plt.xlabel('Drug Regimen')
plt.ylabel('Number of Rows')
plt.xticks(rotation=45)
plt.show()

# %%
# Generate a pie plot showing the distribution of female versus male mice using Pandas
gender_counts = cleaned_data['Sex'].value_counts()
gender_counts.plot(kind='pie', autopct='%1.1f%%', colors=['skyblue', 'lightcoral'], startangle=140, figsize=(8, 8))
plt.title('Distribution of Female vs. Male Mice')
plt.ylabel('')
plt.show()

# %%
# Generate a pie plot showing the distribution of female versus male mice using pyplot
gender_counts = cleaned_data['Sex'].value_counts()

plt.figure(figsize=(8, 8))
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', colors=['skyblue', 'lightcoral'], startangle=140)
plt.title('Distribution of Female vs. Male Mice')
plt.show()

# %% [markdown]
# ## Quartiles, Outliers and Boxplots

# %%
# Calculate the final tumor volume of each mouse across four of the treatment regimens:  
# Capomulin, Ramicane, Infubinol, and Ceftamin

# Start by getting the last (greatest) timepoint for each mouse
last_timepoint = cleaned_data.groupby('Mouse ID')['Timepoint'].max().reset_index()

# Merge this group df with the original DataFrame to get the tumor volume at the last timepoint
final_tumor_volume = pd.merge(last_timepoint, cleaned_data, on=['Mouse ID', 'Timepoint'], how='left')
specified_regimens = final_tumor_volume[final_tumor_volume['Drug Regimen'].isin(['Capomulin', 'Ramicane', 'Infubinol', 'Ceftamin'])]
print(specified_regimens.head())

# %%
# Put treatments into a list for for loop (and later for plot labels)
treatments_list = ['Capomulin', 'Ramicane', 'Infubinol', 'Ceftamin']

print(treatments_list)
# Create empty list to fill with tumor vol data (for plotting)
tumor_vol_data = []

print(tumor_vol_data)



# Calculate the IQR and quantitatively determine if there are any potential outliers. 
for treatment in treatments_list:
    # Filter the data for the current treatment regimen
    treatment_data = specified_regimens[specified_regimens['Drug Regimen'] == treatment]['Tumor Volume (mm3)']
    
    # Calculate the quartiles (Q1 and Q3)
    quartiles = treatment_data.quantile([0.25, 0.75])
    Q1 = quartiles[0.25]
    Q3 = quartiles[0.75]
    
    # Calculate the IQR
    IQR = Q3 - Q1
    
    # Determine the potential outliers using the 1.5 * IQR rule
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR

    # Determine outliers using upper and lower bounds
    potential_outliers = treatment_data[(treatment_data < lower_bound) | (treatment_data > upper_bound)]
    print(f"Potential outliers for {treatment}: {potential_outliers}")
    

# %%
# Generate a box plot that shows the distrubution of the tumor volume for each treatment group.
tumor_vol_data = [specified_regimens[specified_regimens['Drug Regimen'] == treatment]['Tumor Volume (mm3)'] for treatment in treatments_list]

plt.figure(figsize=(10, 6))
plt.boxplot(tumor_vol_data, labels=treatments_list, patch_artist=True, showmeans=True)
plt.title('Distribution of Tumor Volume for Each Treatment Group')
plt.xlabel('Treatment Regimen')
plt.ylabel('Tumor Volume (mm3)')
plt.show()

# %% [markdown]
# ## Line and Scatter Plots

# %%
# Generate a line plot of tumor volume vs. time point for a single mouse treated with Capomulin
mouse_id = 'l509'
mouse_data = cleaned_data[(cleaned_data['Mouse ID'] == mouse_id) & (cleaned_data['Drug Regimen'] == 'Capomulin')]

plt.figure(figsize=(10, 6))
plt.plot(mouse_data['Timepoint'], mouse_data['Tumor Volume (mm3)'], marker='o', color='skyblue', linestyle='-', linewidth=2)
plt.title(f'Tumor Volume vs. Time Point for Mouse {mouse_id} (Capomulin Treatment)')
plt.xlabel('Timepoint (Days)')
plt.ylabel('Tumor Volume (mm3)')
plt.grid(True)
plt.show()

# %%
# Generate a scatter plot of mouse weight vs. the average observed tumor volume for the entire Capomulin regimen
capomulin_data = cleaned_data[cleaned_data['Drug Regimen'] == 'Capomulin']
avg_tumor_volume = capomulin_data.groupby('Mouse ID')['Tumor Volume (mm3)'].mean()
avg_weight = capomulin_data.groupby('Mouse ID')['Weight (g)'].mean()

plt.figure(figsize=(10, 6))
plt.scatter(avg_weight, avg_tumor_volume, color='skyblue', edgecolors='black', s=80, alpha=0.75)
plt.title('Mouse Weight vs. Average Tumor Volume for Capomulin Regimen')
plt.xlabel('Weight (g)')
plt.ylabel('Average Tumor Volume (mm3)')
plt.grid(True)
plt.show()

# %% [markdown]
# ## Correlation and Regression

# %%
# Calculate the correlation coefficient and a linear regression model 
# for mouse weight and average observed tumor volume for the entire Capomulin regimen
correlation = st.pearsonr(avg_weight, avg_tumor_volume)
print(f"Correlation Coefficient: {correlation[0]}")
slope, intercept, rvalue, pvalue, stderr = st.linregress(avg_weight, avg_tumor_volume)
regress_values = avg_weight * slope + intercept
line_eq = "y = " + str(round(slope, 2)) + "x + " + str(round(intercept, 2))
plt.figure(figsize=(10, 6))
plt.scatter(avg_weight, avg_tumor_volume, color='skyblue', edgecolors='black', s=80, alpha=0.75)
plt.plot(avg_weight, regress_values, color='red', linestyle='-', linewidth=2)
plt.annotate(line_eq, (20, 36), fontsize=12, color='red')
plt.title('Mouse Weight vs. Average Tumor Volume for Capomulin Regimen')
plt.xlabel('Weight (g)')
plt.ylabel('Average Tumor Volume (mm3)')
plt.grid(True)
plt.show()

# %%



